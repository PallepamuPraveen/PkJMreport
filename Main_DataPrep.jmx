<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1691300000000</longProp>
        <longProp name="ThreadGroup.end_time">1691300000000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DataPrep_Header_Footer" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths
import java.io.FileWriter
import java.nio.charset.StandardCharsets
import java.util.Random
import java.util.ArrayList;
import java.util.List;
// Initialize random generator
Random rand = new Random()
// Function to generate a 7-digit number starting with a specified digit
String generate7DigitNumber(String startDigit, Random rand) {
    return startDigit + String.format(&quot;%06d&quot;, rand.nextInt(900000) + 100000)
}
// Function to generate an 10-digit number starting with 0
String generate10DigitNumber(Random rand) {
    return String.format(&quot;%10d&quot;, Math.abs(rand.nextLong() % 9000000000L) + 1000000000L)
}
// For dynamic date
def myDate = &quot;${__time(yyyy-MM-dd)}&quot;
log.info(&quot;Date: &quot; + myDate)
// List to store all rows
List&lt;String&gt; rows = new ArrayList&lt;&gt;();
// Add header to the file
String header1 = &quot;H|INETREVEAL|${__time(yyyy-MM-dd,)}|ALERT_MATCHES&quot;;
String header2 = &quot;H|INETREVEAL|${__time(yyyy-MM-dd,)}|ALERT_WL_IWL&quot;;
String header3 = &quot;H|INETREVEAL|${__time(yyyy-MM-dd,)}|ALERT_WL_WC&quot;;
String header4 = &quot;H|INETREVEAL|${__time(yyyy-MM-dd,)}|ALERT_CP&quot;;
Files.write(Paths.get(&quot;ALERT_MATCHES_NONBAU.txt&quot;), (header1 + &quot;\n&quot;).getBytes(StandardCharsets.UTF_8));
Files.write(Paths.get(&quot;ALERT_WL_IWL_NONBAU.txt&quot;), (header2 + &quot;\n&quot;).getBytes(StandardCharsets.UTF_8));
Files.write(Paths.get(&quot;ALERT_WL_WC_NONBAU.txt&quot;), (header3 + &quot;\n&quot;).getBytes(StandardCharsets.UTF_8));
Files.write(Paths.get(&quot;ALERT_CP_NONBAU.txt&quot;), (header4 + &quot;\n&quot;).getBytes(StandardCharsets.UTF_8));
// Generate 1.5M rows of values
for (int i = 1; i &lt;= 1500000; i++) {
    String uniqueValue1 = generate7DigitNumber(&quot;5&quot;, rand)
    String uniqueValue2 = generate7DigitNumber(&quot;3&quot;, rand)
    String uniqueValue3 = generate10DigitNumber(rand)
    // Combine unique values into the specified format
     String combinedValues = &quot;&quot;&quot;D|${uniqueValue1}|20240513180421|WLM_FullSubjectsVsDeltaList - 13052024_18:04|Daily|SAP~PT~+${uniqueValue3}|NUHYTGDIHJ CTJSOSHRGRMUAQO|19690324|Female||Sg3|CBA|P|ACTV|Y||||UNK||||PEP|WORLDCHECK|${uniqueValue2}|PEP - Delta Personal Name FuzzyAbr, DOB and Gender vs Full WC Individual|f|subject_gender|F|configuration.detection.check.match.type.exact.match|1|&quot;&quot;&quot;.replaceAll(&quot;\\n&quot;, &quot;&quot;)
   rows.add(combinedValues)
//Parent File

new FileWriter(&quot;ALERT_MATCHES_NONBAU.txt&quot;, true).with {
	write(combinedValues  + &quot;\n&quot;)
	close()
}

// Child 1
if (i &lt;= 750000) {

String nextSampleFormat1 = &quot;&quot;&quot;D|${uniqueValue1}|4683387|FCC|Customer Screening - PEP|I-Individual||FIRSTHKCJULLMWL MIDOEQDSCKVTP LASTATX  AUUOU|FIRSTHKCJULLMWL|MIDOEQDSCKVTP|LASTATX  AUUOU||||1950/01/01|F|TC|MYS|MYS|MYS||MYS|MYS||||||||||||INDIVIDUAL||Additional Information||CBA||FCC Business Banking|Snow|2023/05/25|ABC|2023/05/25|2023/06/25|REVIEW-COMPLETED|MYS||||||||||&quot;&quot;&quot;
new FileWriter(&quot;ALERT_WL_IWL_NONBAU.txt&quot;, true).with {
	write(nextSampleFormat1 + &quot;\n&quot;)
	close()
}
};
else {
// Child 2
String nextSampleFormat2 = &quot;&quot;&quot;D|${uniqueValue1}|3692972|YZVRGCYXMZV LEP|GCZVRJACAN||||POLITICAL INDIVIDUAL|PEP IO|||69|20220101|||||||||Bahrain|Bahrain||F||INF|||C4|20001024|20001024|||SPECIAL INTEREST CATEGORIES&quot;&quot;&quot;
new FileWriter(&quot;ALERT_WL_WC_NONBAU.txt&quot;, true).with {
	write(nextSampleFormat2 + &quot;\n&quot;)
	close()
}
// Child 3
String nextSampleFormat3 = &quot;&quot;&quot;D|${uniqueValue1}|SAP~PT~+0001548189|DIRC|&quot;&quot;&quot;
new FileWriter(&quot;ALERT_CP_NONBAU.txt&quot;, true).with {
	write(nextSampleFormat3 + &quot;\n&quot;)
	close()
}
};
}
// Calculate the footer for the first file
String footer = &quot;T|&quot; + rows.size();
try (FileWriter fw = new FileWriter(&quot;ALERT_MATCHES_NONBAU.txt&quot;, true)) {
	   fw.write(footer + &quot;\n&quot;);
}
// Calculate the footer for the first file
String footer1 = &quot;T|&quot; + rows.size()/2;
try (FileWriter fw = new FileWriter(&quot;ALERT_WL_IWL_NONBAU.txt&quot;, true)) {
   fw.write(footer1 + &quot;\n&quot;);
}

try (FileWriter fw = new FileWriter(&quot;ALERT_WL_WC_NONBAU.txt&quot;, true)) {
   fw.write(footer1 + &quot;\n&quot;);
}

try (FileWriter fw = new FileWriter(&quot;ALERT_CP_NONBAU.txt&quot;, true)) {
   fw.write(footer1 + &quot;\n&quot;);
}

//ALERT_MATCHES_NONBAU1
//ALERT_WL_IWL_NONBAU
//ALERT_WL_WC_NONBAU
//ALERT_CP_NONBAU
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
