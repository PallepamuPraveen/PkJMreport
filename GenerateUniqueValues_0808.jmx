<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1691300000000</longProp>
        <longProp name="ThreadGroup.end_time">1691300000000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ParentFile" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths
import java.nio.charset.StandardCharsets
import java.util.Random

// Initialize random generator
Random rand = new Random()

// Function to generate a 7-digit number starting with a specified digit
String generate7DigitNumber(String startDigit, Random rand) {
    return startDigit + String.format(&quot;%06d&quot;, rand.nextInt(900000) + 100000)
}

// Function to generate an 11-digit number starting with 0
String generate11DigitNumber(Random rand) {
    return &quot;0&quot; + String.format(&quot;%010d&quot;, Math.abs(rand.nextLong() % 90000000000L) + 10000000000L)
}

// List to store all rows
List&lt;String&gt; rows = new ArrayList&lt;&gt;()

// Generate 100 rows of values
for (int i = 1; i &lt;= 100; i++) {
    String uniqueValue1 = generate7DigitNumber(&quot;5&quot;, rand)
    String uniqueValue2 = generate7DigitNumber(&quot;3&quot;, rand)
    String uniqueValue3 = generate11DigitNumber(rand)

    // Combine unique values into the specified format
     String combinedValues = &quot;&quot;&quot;D|${uniqueValue1}|20240501081712|WLM_FullSubjectsVsFullList - 01052024_08:16|FullvFull|SAP~PT~+${uniqueValue3}|CUXHNVXNQD UAJXVDPHUXETQXM|19501030|Female||Sg3|CBA|P|ONBD|Y||||UNK||||CTF|WC APPLICABLE CTF GROUP|${uniqueValue2}|CTF - Delta Personal First Name and Last Name and DOB vs Full WC Individual|CUXHNVXNQD|subject_first_name|CUXHNVXNQD|configuration.detection.check.match.type.exact.match.restrictive|1|&quot;&quot;&quot;.replaceAll(&quot;\\n&quot;, &quot;&quot;)
   rows.add(combinedValues)
    
    // Store uniqueValue1 in a JMeter property for the next sample
    props.put(&quot;uniqueValue1&quot;, uniqueValue1)
}

// Define the output file path
String outputPath = &quot;unique_values.txt&quot;

// Write all rows to the file
Files.write(Paths.get(outputPath), rows.join(System.lineSeparator()).getBytes(StandardCharsets.UTF_8))

log.info(&quot;Unique values saved to file: ${outputPath}&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="IWLFile" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths
import java.nio.charset.StandardCharsets

// Retrieve uniqueValue1 from JMeter properties
String uniqueValue1 = props.get(&quot;uniqueValue1&quot;)

// Define the format for the next set of sample
String nextSampleFormat = &quot;&quot;&quot;D|${uniqueValue1}|FCC-152069|FCC|Customer Screening - PEP|I-Individual||Test1 Test2 Test3|Test1|Test2|Test3|||Test||Male|Banker|AUS|AUS||||Test|Test|Test|AUS|Test|130013|Test|CBA^~123489033^~C-1234^~cba-123^~Sydney^~AUS|||||Test|Test|Test|||Test|FCC IB&amp;M||2024/03/27||2024/03/27|2024/04/01|Update Review Completed|AUS||||||||||&quot;&quot;&quot;

// Define the output file path for the next sample
String nextOutputPath = &quot;IWLFile.txt&quot;

// Write the formatted sample to the file
Files.write(Paths.get(nextOutputPath), nextSampleFormat.getBytes(StandardCharsets.UTF_8))

log.info(&quot;Next sample values saved to file: ${nextOutputPath}&quot;)

</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="IWLFile" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths
import java.nio.charset.StandardCharsets
import java.util.List
// Define the input file path (from Part 1)
String inputPath = &quot;unique_values.txt&quot;
// Read all lines from the file
List&lt;String&gt; allRows = Files.readAllLines(Paths.get(inputPath), StandardCharsets.UTF_8)
// Determine 50% of the total lines
int totalLines = allRows.size()
int linesToProcess = totalLines / 2
// List to store the new formatted rows
List&lt;String&gt; processedRows = new ArrayList&lt;&gt;()
// Process 50% of the lines to create a new template
for (int i = 0; i &lt; linesToProcess; i++) {
   String uniqueValue1 = allRows.get(i).split(&quot;\\|&quot;)[1] // Extract uniqueValue1 from the original row
//   String uniqueValue1 = allRows.get(i).split(&quot;\\|&quot;)[1] // Extract uniqueValue1 from the original row
      // Create a new formatted row using uniqueValue1 and other fixed text
   String nextSampleFormat = &quot;&quot;&quot;D|${uniqueValue1}|FCC-152069|FCC|Customer Screening - PEP|I-Individual||Test1 Test2 Test3|Test1|Test2|Test3|||Test||Male|Banker|AUS|AUS||||Test|Test|Test|AUS|Test|130013|Test|CBA^~123489033^~C-1234^~cba-123^~Sydney^~AUS|||||Test|Test|Test|||Test|FCC IB&amp;M||2024/03/27||2024/03/27|2024/04/01|Update Review Completed|AUS||||||||||&quot;&quot;&quot;
   processedRows.add(nextSampleFormat)
}
// Define the output file path for the new template
String outputPath = &quot;50_percent_next_sample_values.txt&quot;
// Write the processed rows to the file
Files.write(Paths.get(outputPath), processedRows.join(System.lineSeparator()).getBytes(StandardCharsets.UTF_8))
log.info(&quot;50% of the rows saved to file with new template: ${outputPath}&quot;)
has context menu
Compose</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WLFile" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths
import java.nio.charset.StandardCharsets

// Retrieve uniqueValue1 from JMeter properties
String uniqueValue1 = props.get(&quot;uniqueValue1&quot;)

// Define the format for the next set of sample
String nextSampleFormat = &quot;&quot;&quot;D|${uniqueValue1}|3209874|WFUI NIARD  ZVM|AUHBJRYSFI||||POLITICAL INDIVIDUAL|PEP IO|||||19501030||||||||Belgium|Bahrain||F||INF|||C4|20001024|20001024|||SPECIAL INTEREST CATEGORIES&quot;&quot;&quot;

// Define the output file path for the next sample
String nextOutputPath = &quot;WCFile.txt&quot;

// Write the formatted sample to the file
Files.write(Paths.get(nextOutputPath), nextSampleFormat.getBytes(StandardCharsets.UTF_8))

log.info(&quot;Next sample values saved to file: ${nextOutputPath}&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate Unique Values" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.nio.file.Files
import java.nio.file.Paths
import java.nio.charset.StandardCharsets
import java.util.Random
// Initialize random generator	
Random rand = new Random()
// Retrieve all lines from the first output file
List&lt;String&gt; allLines = Files.readAllLines(Paths.get(&quot;unique_values.txt&quot;), StandardCharsets.UTF_8)
// Calculate the number of records to select (50% of total)
int totalRecords = allLines.size()
int recordsToSelect = totalRecords / 2
// Shuffle the list to randomize the selection
Collections.shuffle(allLines, rand)
// Select the first 50% of the shuffled list
List&lt;String&gt; selectedRecords = allLines.subList(0, recordsToSelect)
// Prepare the format for the next set of samples based on the selected records
List&lt;String&gt; formattedSamples = selectedRecords.collect { uniqueValue1 -&gt; &quot;&quot;&quot;D|${uniqueValue1}|3685564|NUKXXUTJPSCEAAN|VKHRADAK L||||RELIGION||||||19501030|1950/10/30||||||||Bahrain||F||INF|PHDND-MLAO||C4|20001024|20001024|||SPECIAL INTEREST CATEGORIES&quot;&quot;&quot;
}
// Define the output file path for the next sample
String nextOutputPath = &quot;next_sampled_values.txt&quot;
// Write the formatted samples to the file
Files.write(Paths.get(nextOutputPath), formattedSamples.join(System.lineSeparator()).getBytes(StandardCharsets.UTF_8))
log.info(&quot;Next sample values saved to file: ${nextOutputPath}&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
